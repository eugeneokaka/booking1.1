// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  phone     String
  bookings  Booking[]
  password  String?
}

model Service {
  id          String      @id @default(uuid())
  name        String
  description String
  duration    Int?        // in minutes
  timeSlots   TimeSlot[]
  workers     Worker[]    // 1-to-many: service â†’ worker
}

model Worker {
  id         String     @id @default(uuid())
  firstName  String
  lastName   String
  email      String     @unique
  serviceId  String?    // now optional
  service    Service?   @relation(fields: [serviceId], references: [id])
  bookings   Booking[]
}

model TimeSlot {
  id         String    @id @default(uuid())
  date       DateTime? // specific day
  startTime  String    // e.g., "10:00"
  endTime    String    // e.g., "11:00"
  isBooked   Boolean   @default(false)

  serviceId  String
  service    Service   @relation(fields: [serviceId], references: [id])
  booking    Booking?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(uuid())
  userId      String
  timeSlotId  String    @unique
  workerId    String    // assigned worker

  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id])
  worker      Worker    @relation(fields: [workerId], references: [id])
}

